---
title: "PracticaCalificada_01"
author: "Grupo 4"
format: html
editor: visual
---

ENCISO CCORAHUA CALEB RUDY

BRAVO ZAPATA MARIA FERNANDA

DONAYRE CASTILLO MATEO

CANCHARI GUTIERREZ MARCELA MABEL

MARROQUIN QUISPE DIANA

ANDERSON JOSUE LEYHUACC CABRERA

MARICIELO SERRANO CCAHUAY

FUNCION 01:

"Mi_promedio_San juan"

La funci√≥n notas_sanjuan se implement√≥ como una herramienta sencilla y pr√°ctica para calcular el promedio simple de las notas obtenidas en un curso. Generalmente, los cursos universitarios brindan tres calificaciones principales, que provienen de ex√°menes, actividades y otros trabajos evaluados, por lo que esta funci√≥n est√° pensada para adaptarse f√°cilmente a ese esquema com√∫n.

Finalmente, esta funci√≥n representa un primer paso importante para calcular el promedio ponderado del curso, ya que al obtener de forma clara el promedio de las notas parciales, se puede luego aplicar los pasos correspondientes seg√∫n el criterio de la calificacion

```{r}
promedio_sanjuan <- function(mis_notas) {
  promedio <- mean(notas)
  return(promedio)
}
# mis_notas <- c(14, 15, 12, 11, 16)
# promedio_sanjuan (mis_notas)
# return(promedio)
```

```{r}
mis_notas <- c(14, 16, 15, 17)
notas_sanjuan(mis_notas)
```

```{r}
# Definimos la funci√≥n que calcula el promedio de tus notas
notas_sanjuan <- function(notas) {
  promedio <- mean(notas)
  return(promedio)
}
# Creamos un vector con tus notas
mis_notas <- c(14, 16, 15, 17)

# Llamamos a la funci√≥n
notas_sanjuan(mis_notas)
```

FUNCION 02:

La funci√≥n promedio_ponderado fue implementada con el objetivo de calcular de manera precisa el promedio final de un curso, considerando los diferentes pesos o porcentajes asignados a cada calificaci√≥n. A diferencia del promedio simple, esta funci√≥n permite reflejar la realidad del sistema de evaluaci√≥n, donde no todas las notas tienen el mismo valor.

```{r}
# Funci√≥n para calcular el promedio ponderado
promedio_ponderado <- function(notas, pesos) {
  resultado <- sum(notas * pesos) / sum(pesos)
  return(resultado)
}
mis_notas <- c(12, 14, 13, 11, 13, 16)
mis_pesos <- c(0.15, 0.15, 0.15, 0.15, 0.20, 0.20)

promedio_ponderado(mis_notas, mis_pesos)
```

FUNCION 03:

La funci√≥n clasificar_glucosa fue implementada con el objetivo de identificar y clasificar el nivel de glucosa en sangre de distintos pacientes. Esta funci√≥n permite diferenciar entre valores normales y elevados, facilitando as√≠ una evaluaci√≥n preliminar del riesgo de hiperglucemia o diabetes. Es especialmente √∫til en contextos cl√≠nicos y acad√©micos donde se requiere una revisi√≥n r√°pida del estado gluc√©mico de varios individuos.

```{r}
# Crear un dataframe con 15 pacientes y sus niveles de glucosa (mg/dL)
pacientes <- data.frame(
  nombre = paste("Paciente", 1:15),
  glucosa = c(90, 110, 130, 85, 145, 99, 101, 115, 77, 160, 88, 105, 96, 180, 92))
```

```{r}
clasificar_glucosa <- function(valor) {
  if (valor < 100) {
    return("Normal")
  } else if (valor >= 100 & valor < 126) {
    return("Alterada en ayunas")
  } else {
    return("Elevada (sospecha de diabetes)")
  }
}
```

```{r}
# Crear una nueva columna con la clasificaci√≥n
pacientes$clasificacion <- sapply(pacientes$glucosa, clasificar_glucosa)

# Ver el resultado
print(pacientes)
```

FUNCION 04:

La funci√≥n tiempo_en_pantalla fue creada con el objetivo de estimar el tiempo total que un estudiante de medicina pasa frente a una pantalla durante la semana con fines de estudio. Considera la cantidad de horas diarias dedicadas al estudio digital, permitiendo visualizar el esfuerzo acad√©mico invertido y fomentar una gesti√≥n saludable del tiempo.

```{r}
tiempo_en_pantalla <- function(horas_por_dia) {
  # Verificar que haya 7 valores (uno por cada d√≠a de la semana)
  if (length(horas_por_dia) != 7) {
    stop("Debes ingresar 7 valores, uno por cada d√≠a de la semana (de lunes a domingo).")
  }
  
  dias <- c("Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo")
  total_horas <- sum(horas_por_dia)
  
  # Crear un resumen en data frame
  resumen <- data.frame(
    D√≠a = dias,
    Horas = horas_por_dia
  )
  
  cat("Resumen del tiempo frente a pantalla:\n")
  print(resumen)
  cat("\nTotal semanal: ", total_horas, "horas estudiando frente a una pantalla \n")
  
  return(total_horas)
}
```

```{r}
# Supongamos que estudias as√≠:
horas_estudio <- c(6, 5, 6, 4, 3, 2, 1)  # De lunes a domingo
tiempo_en_pantalla(horas_estudio)
```

FUNCION 05:

La funci√≥n planificador_tareas fue desarrollada para ayudar a estudiantes a organizar de manera eficiente sus tareas diarias, permitiendo planificar actividades como clases, horas de estudio, descansos y otras responsabilidades. Esta funci√≥n facilita la creaci√≥n de un cronograma personalizado para mejorar la productividad y el manejo del tiempo.

```{r}
planificador_tareas <- function(dias, tareas, horas) {
  if (length(dias) != length(tareas) | length(dias) != length(horas)) {
    stop("Las listas de d√≠as, tareas y horas deben tener la misma longitud.")
  }
  
  plan <- data.frame(
    D√≠a = dias,
    Tarea = tareas,
    Horas_Asignadas = horas
  )
  
  cat("üìÖ Tu planificaci√≥n de tareas:\n")
  print(plan)
  
  total_horas <- sum(horas)
  cat("\n‚è≥ Total de horas planificadas en la semana:", total_horas, "horas\n")
  
  return(plan)
}
```

```{r}
dias <- c("Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo")
tareas <- c("Clases", "Estudio", "Pr√°ctica cl√≠nica", "Estudio", "Repaso", "Descanso", "Organizar semana")
horas <- c(4, 5, 6, 4, 3, 2, 1)

planificador_tareas(dias, tareas, horas)

```

INSTALACI√ìN DE PAQUETES

PAQUETE NUMERO 1:

El paquete ggplot2 sirve para crear gr√°ficos bonitos y personalizados de forma sencilla y potente en R. Es uno de los paquetes m√°s usados en visualizaci√≥n de datos y se basa en la ‚ÄúGram√°tica de los Gr√°ficos‚Äù (de ah√≠ su nombre: ggplot).

```{r}
install.packages("ggplot2")
```

```{r}
# Datos de ejemplo
notas <- data.frame(
  estudiante = c("Ana", "Luis", "Sof√≠a", "Carlos", "Valeria"),
  calificacion = c(85, 92, 78, 88, 95)
)
# Carga la librer√≠a
library(ggplot2)
# Crear gr√°fico de barras
ggplot(notas, aes(x = estudiante, y = calificacion, fill = estudiante)) +
  geom_bar(stat = "identity") +
  labs(title = "Calificaciones de los estudiantes",
       x = "Estudiante",
       y = "Calificaci√≥n") +
  theme_minimal()
```

PAQUETE NUMERO 2:

```{r}
install.packages("stringr")
```

```{r}
library(stringr)
```

```{r}
nombre <- "maria fernanda"
str_to_upper(nombre)  # "MARIA FERNANDA"

apellido <- "LOPEZ"
str_to_lower(apellido)  # "lopez"
```

```{r}
str_length("Hola crack")  # 10
```

```{r}
frase <- "Estoy estudiando medicina"
str_detect(frase, "medicina")  # TRUE
str_detect(frase, "ingenier√≠a")  # FALSE
```

PAQUETE 03:

```{r}
install.packages("lubridate")

```

```{r}
library(lubridate)
```

```{r}
inicio <- ymd_hms("2025-04-15 08:00:00")
fin <- ymd_hms("2025-04-15 11:30:00")
```

```{r}
tiempo_estudio <- fin - inicio
tiempo_estudio  # Time difference of 3.5 hours
```

```{r}
nueva_sesion <- inicio + hours(2)
nueva_sesion  # "2025-04-15 10:00:00"
```

## QUARTO
